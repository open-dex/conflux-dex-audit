package common

import (
	//"fmt"
	"encoding/json"
	"strconv"

	"github.com/go-resty/resty/v2"
)

// Client resty client wrapper
type Client struct {
	client *resty.Client
	url    string
}

// Asset conflux dex currency
// Auto-generated by https://mholt.github.io/json-to-go/
type Asset struct {
	ID                    int     `json:"id"`
	Name                  string  `json:"name"`
	ContractAddress       string  `json:"contractAddress"`
	TokenAddress          string  `json:"tokenAddress"`
	DecimalDigits         int     `json:"decimalDigits"`
	CrossChain            bool    `json:"crossChain"`
	MinimumWithdrawAmount float64 `json:"minimumWithdrawAmount"`
}

// Balance conflux DEX balance
type Balance struct {
	ID        int     `json:"id"`
	UserID    int     `json:"userId"`
	Currency  string  `json:"currency"`
	Hold      float64 `json:"hold"`
	Available float64 `json:"available"`
	Status    string  `json:"status"`
	Balance   string  `json:"balanceString"`
}

// AssetResponse conflux DEX currencies
type AssetResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    struct {
		Total int     `json:"total"`
		Items []Asset `json:"items"`
	} `json:"data"`
}

// BalanceResponse conflux DEX balances of a user
type BalanceResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    struct {
		Total int       `json:"total"`
		Items []Balance `json:"items"`
	} `json:"data"`
}

// NewClient init
func NewClient(url string) *Client {
	return &Client{
		client: resty.New(),
		url:    url,
	}
}

// GetAssets gets the all available assets.
func (c *Client) GetAssets() []Asset {
	resp, err := c.client.R().Get(c.url + "/currencies/?secretkey=ConfluxFDSiof0j20fJFDHbSkgnkl5gkGDSKL")
	//resp, err := c.client.R().Get(c.url + "/currencies")
	if err != nil {
		panic(err)
	}

	if !resp.IsSuccess() {
		panic("Status Code: " + strconv.Itoa(resp.StatusCode()))
	}

	var r = AssetResponse{}
	err = json.Unmarshal(resp.Body(), &r)
	if err != nil {
		panic(err)
	}

	var validAssets []Asset

	for _, item := range r.Data.Items {
		if item.Name != "EOS" && item.Name != "CNY" {
			validAssets = append(validAssets, item)
		}
	}

	return validAssets
}

// GetBalance get the balance of the specified account.
func (c *Client) GetBalance(account string) ([]Balance, error) {
	resp, err := c.client.R().Get(c.url + "/accounts/" + account + "/?secretkey=ConfluxFDSiof0j20fJFDHbSkgnkl5gkGDSKL")
	//resp, err := c.client.R().Get(c.url + "/accounts/" + account)
	if err != nil {
		panic(err)
	}

	if !resp.IsSuccess() {
		panic("Status Code: " + strconv.Itoa(resp.StatusCode()))
	}

	var r = BalanceResponse{}
	err = json.Unmarshal(resp.Body(), &r)
	if err != nil {
		return nil, err
	}

	return r.Data.Items, nil
}
